// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: src/proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface RegisterRequest {
  email: string;
  password: string;
  name: string;
  lastName: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface GetProfileRequest {
  userId: string;
}

export interface UpdateUserRequest {
  id: string;
  email: string;
  password: string;
  name: string;
  lastName: string;
}

export interface UserIdRequest {
  id: string;
}

export interface DeleteResponse {
  message: string;
}

export interface UserResponse {
  id: string;
  email: string;
  name: string;
  lastName: string;
}

export interface LoginResponse {
  accessToken: string;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  register(request: RegisterRequest): Observable<UserResponse>;

  login(request: LoginRequest): Observable<LoginResponse>;

  getProfile(request: GetProfileRequest): Observable<UserResponse>;

  updateUser(request: UpdateUserRequest): Observable<UserResponse>;

  deleteUser(request: UserIdRequest): Observable<DeleteResponse>;
}

export interface UserServiceController {
  register(request: RegisterRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  getProfile(request: GetProfileRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  updateUser(request: UpdateUserRequest): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  deleteUser(request: UserIdRequest): Promise<DeleteResponse> | Observable<DeleteResponse> | DeleteResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["register", "login", "getProfile", "updateUser", "deleteUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
