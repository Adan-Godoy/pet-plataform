// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: src/proto/pet.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "../../google/protobuf/empty";

export const protobufPackage = "pet";

export interface CreatePetRequest {
  name: string;
  /** Raza */
  breed: string;
  age: number;
  photoUrl?:
    | string
    | undefined;
  /** ID del dueño, viene del microservicio de usuarios */
  ownerId: string;
}

export interface PetIdRequest {
  /** ID de la mascota en MongoDB */
  id: string;
}

export interface OwnerIdRequest {
  /** ID del dueño */
  ownerId: string;
}

export interface UpdatePetRequest {
  id: string;
  name?: string | undefined;
  breed?: string | undefined;
  age?: number | undefined;
  photoUrl?: string | undefined;
}

export interface PetResponse {
  id: string;
  name: string;
  breed: string;
  age: number;
  photoUrl: string;
  ownerId: string;
}

export interface PetListResponse {
  pets: PetResponse[];
}

export const PET_PACKAGE_NAME = "pet";

/** El servicio que expondrá nuestro microservicio de mascotas */

export interface PetServiceClient {
  /** RPC para crear una nueva mascota */

  createPet(request: CreatePetRequest): Observable<PetResponse>;

  /** RPC para obtener una mascota por su ID */

  getPetById(request: PetIdRequest): Observable<PetResponse>;

  /** RPC para obtener todas las mascotas de un dueño (owner) */

  getPetsByOwner(request: OwnerIdRequest): Observable<PetListResponse>;

  /** RPC para actualizar los datos de una mascota */

  updatePet(request: UpdatePetRequest): Observable<PetResponse>;

  /** RPC para eliminar una mascota (buena práctica tenerlo) */

  deletePet(request: PetIdRequest): Observable<Empty>;
}

/** El servicio que expondrá nuestro microservicio de mascotas */

export interface PetServiceController {
  /** RPC para crear una nueva mascota */

  createPet(request: CreatePetRequest): Promise<PetResponse> | Observable<PetResponse> | PetResponse;

  /** RPC para obtener una mascota por su ID */

  getPetById(request: PetIdRequest): Promise<PetResponse> | Observable<PetResponse> | PetResponse;

  /** RPC para obtener todas las mascotas de un dueño (owner) */

  getPetsByOwner(request: OwnerIdRequest): Promise<PetListResponse> | Observable<PetListResponse> | PetListResponse;

  /** RPC para actualizar los datos de una mascota */

  updatePet(request: UpdatePetRequest): Promise<PetResponse> | Observable<PetResponse> | PetResponse;

  /** RPC para eliminar una mascota (buena práctica tenerlo) */

  deletePet(request: PetIdRequest): void;
}

export function PetServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createPet", "getPetById", "getPetsByOwner", "updatePet", "deletePet"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PetService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PetService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PET_SERVICE_NAME = "PetService";
